//parent componenet for test
<template>
  <button @click="modalVisible = true">Open Modal</button>

  <CustomModal
    v-model:visible="modalVisible"
    title="Draggable & Resizable Modal"
  >
    <p>This is the content inside the modal. Try dragging and resizing!</p>
  </CustomModal>
</template>

<script>
import CustomModal from '@/views/modal16june/CustomDRModal.vue';

export default {
  components: { CustomModal },
  data() {
    return {
      modalVisible: false,
    };
  },
};
</script>


//CustomDRModal.vue
<template>
  <div v-if="visible" class="overlay" @mousedown.self="closeOnOverlay">
    <div
      class="modal"
      ref="modal"
      :style="modalStyle"
      @mousedown.stop="bringToFront"
    >
      <div class="modal-header" @mousedown="startDrag">
        <span>{{ title }}</span>
        <button class="close-button" @click="close">Ã—</button>
      </div>

      <div class="modal-body">
        <slot></slot>
      </div>

      <!-- Resize handles -->
      <div
        v-for="dir in directions"
        :key="dir"
        class="resize-handle"
        :class="`resize-${dir}`"
        @mousedown="startResize($event, dir)"
      />
    </div>
  </div>
</template>

<script>
export default {
  name: 'CustomModal',
  props: {
    visible: { type: Boolean, required: true },
    title: { type: String, default: 'Modal Title' },
    minWidth: { type: Number, default: 300 },
    minHeight: { type: Number, default: 200 },
  },
  data() {
    return {
      posX: 100,
      posY: 100,
      width: 400,
      height: 300,
      isDragging: false,
      dragStart: { x: 0, y: 0 },
      isResizing: false,
      resizeDir: '',
      resizeStart: {},
      directions: [
        'top', 'right', 'bottom', 'left',
        'top-left', 'top-right', 'bottom-left', 'bottom-right',
      ],
      zIndex: 1000,
    };
  },
  computed: {
    modalStyle() {
      return {
        top: this.posY + 'px',
        left: this.posX + 'px',
        width: this.width + 'px',
        height: this.height + 'px',
        zIndex: this.zIndex,
      };
    },
  },
  methods: {
    close() {
      this.$emit('update:visible', false);
    },
    closeOnOverlay() {
      this.$emit('update:visible', false);
    },
    bringToFront() {
      this.zIndex++;
    },
    startDrag(e) {
      this.isDragging = true;
      this.dragStart.x = e.clientX - this.posX;
      this.dragStart.y = e.clientY - this.posY;
      document.addEventListener('mousemove', this.onDrag);
      document.addEventListener('mouseup', this.stopDrag);
    },
    onDrag(e) {
      if (!this.isDragging) return;
      this.posX = e.clientX - this.dragStart.x;
      this.posY = e.clientY - this.dragStart.y;
    },
    stopDrag() {
      this.isDragging = false;
      document.removeEventListener('mousemove', this.onDrag);
      document.removeEventListener('mouseup', this.stopDrag);
    },
    startResize(e, dir) {
      this.isResizing = true;
      this.resizeDir = dir;
      this.resizeStart = {
        x: e.clientX,
        y: e.clientY,
        width: this.width,
        height: this.height,
        posX: this.posX,
        posY: this.posY,
      };
      document.addEventListener('mousemove', this.onResize);
      document.addEventListener('mouseup', this.stopResize);
    },
    onResize(e) {
      if (!this.isResizing) return;

      const dx = e.clientX - this.resizeStart.x;
      const dy = e.clientY - this.resizeStart.y;
      let { width, height, posX, posY } = this.resizeStart;

      if (this.resizeDir.includes('right')) {
        this.width = Math.max(this.minWidth, width + dx);
      }
      if (this.resizeDir.includes('bottom')) {
        this.height = Math.max(this.minHeight, height + dy);
      }
      if (this.resizeDir.includes('left')) {
        const newWidth = width - dx;
        if (newWidth >= this.minWidth) {
          this.width = newWidth;
          this.posX = posX + dx;
        }
      }
      if (this.resizeDir.includes('top')) {
        const newHeight = height - dy;
        if (newHeight >= this.minHeight) {
          this.height = newHeight;
          this.posY = posY + dy;
        }
      }
    },
    stopResize() {
      this.isResizing = false;
      document.removeEventListener('mousemove', this.onResize);
      document.removeEventListener('mouseup', this.stopResize);
    },
  },
};
</script>

<style scoped>
.overlay {
  position: fixed;
  inset: 0;
  background: rgba(0, 0, 0, 0.4);
  z-index: 999;
}

.modal {
  position: absolute;
  background: white;
  border: 1px solid #ccc;
  box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
  overflow: hidden;
}

.modal-header {
  background: #2c3e50;
  color: white;
  padding: 10px;
  cursor: move;
  display: flex;
  justify-content: space-between;
  align-items: center;
  user-select: none;
}

.modal-body {
  padding: 15px;
  height: calc(100% - 40px);
  overflow: auto;
}

.close-button {
  background: none;
  border: none;
  color: white;
  font-size: 18px;
  cursor: pointer;
}

.resize-handle {
  position: absolute;
  background: transparent;
}

.resize-top {
  top: -5px;
  left: 0;
  right: 0;
  height: 10px;
  cursor: n-resize;
}

.resize-right {
  top: 0;
  right: -5px;
  bottom: 0;
  width: 10px;
  cursor: e-resize;
}

.resize-bottom {
  bottom: -5px;
  left: 0;
  right: 0;
  height: 10px;
  cursor: s-resize;
}

.resize-left {
  top: 0;
  left: -5px;
  bottom: 0;
  width: 10px;
  cursor: w-resize;
}

.resize-top-left {
  top: -5px;
  left: -5px;
  width: 10px;
  height: 10px;
  cursor: nw-resize;
}

.resize-top-right {
  top: -5px;
  right: -5px;
  width: 10px;
  height: 10px;
  cursor: ne-resize;
}

.resize-bottom-left {
  bottom: -5px;
  left: -5px;
  width: 10px;
  height: 10px;
  cursor: sw-resize;
}

.resize-bottom-right {
  bottom: -5px;
  right: -5px;
  width: 10px;
  height: 10px;
  cursor: se-resize;
}
</style>
