<template>
  <div class="base-table-wrapper">
    <table class="base-table">
      <thead>
        <slot name="header" :onDragStart="onDragStart" :onDragOver="onDragOver" :onDrop="onDrop" />
      </thead>
      <tbody>
        <slot />
      </tbody>
      <tfoot>
        <slot name="footer" />
      </tfoot>
    </table>
  </div>
</template>

<script>
export default {
  name: "BaseTable",
  emits: ["reorder-columns"],
  data() {
    return {
      dragStartIndex: null,
    };
  },
  methods: {
    onDragStart(index) {
      this.dragStartIndex = index;
    },
    onDragOver(event, index) {
      event.preventDefault();
      event.dataTransfer.dropEffect = "move";
    },
    onDrop(event, index) {
      this.$emit("reorder-columns", { from: this.dragStartIndex, to: index });
      this.dragStartIndex = null;
    },
  },
};
</script>

<style scoped>
.base-table-wrapper {
  overflow-x: auto;
}
.base-table {
  border-collapse: collapse;
  width: 100%;
  table-layout: fixed;
}
.base-table th,
.base-table td {
  border: 1px solid #ddd;
  padding: 8px;
  text-align: left;
  min-width: 100px;
}
</style>

----------------------------------------------
<template>
  <th
    draggable="true"
    @dragstart="handleDragStart"
    @dragover="handleDragOver"
    @drop="handleDrop"
  >
    <div class="header-cell">
      <span>{{ column.label }}</span>
      <button class="remove-btn" @click.stop="$emit('remove-column', index)">âœ•</button>
    </div>
  </th>
</template>

<script>
export default {
  name: "BaseTableHeaderCell",
  props: {
    column: Object,
    index: Number,
    onDragStart: Function,
    onDragOver: Function,
    onDrop: Function,
  },
  methods: {
    handleDragStart(e) {
      this.onDragStart && this.onDragStart(this.index, e);
    },
    handleDragOver(e) {
      this.onDragOver && this.onDragOver(e, this.index);
    },
    handleDrop(e) {
      this.onDrop && this.onDrop(e, this.index);
    },
  },
};
</script>

<style scoped>
.header-cell {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.remove-btn {
  background: transparent;
  border: none;
  cursor: pointer;
  color: red;
  font-weight: bold;
}
</style>

------------------------------------------------------
<template>
  <tr
    class="base-table-row"
    :class="{ hovered: isHovered, selected: isSelected }"
    @mouseenter="isHovered = true"
    @mouseleave="isHovered = false"
    @click="onRowClick"
  >
    <slot></slot>
  </tr>
</template>

<script>
export default {
  name: "BaseTableRow",
  props: {
    rowData: { type: Object, required: true },
    selectedIds: { type: Array, default: () => [] },
    rowIdKey: { type: String, default: "id" },
  },
  emits: ["row-select"],
  data() {
    return {
      isHovered: false,
    };
  },
  computed: {
    isSelected() {
      const id = this.rowData?.[this.rowIdKey];
      return this.selectedIds.includes(id);
    },
  },
  methods: {
    onRowClick(e) {
      const ctrlPressed = e.ctrlKey || e.metaKey;
      const id = this.rowData?.[this.rowIdKey];
      this.$emit("row-select", { id, ctrlPressed, event: e });
    },
  },
};
</script>

<style scoped>
.base-table-row.hovered {
  background-color: #f3f8ff;
}
.base-table-row.selected {
  background-color: #cce4ff;
}
.base-table-row:hover {
  cursor: pointer;
}
</style>

------------------------------------------
<template>
  <td @click="onCellClick">
    <slot>{{ cellData }}</slot>
  </td>
</template>

<script>
export default {
  name: "BaseTableCell",
  props: {
    cellData: [String, Number],
    rowData: Object,
    column: Object,
    cellEvents: { type: Object, default: () => ({}) },
  },
  methods: {
    onCellClick(e) {
      if (this.cellEvents.click)
        this.cellEvents.click(this.cellData, this.rowData, this.column, e);
    },
  },
};
</script>


---------------------------
<template>
  <div class="pagination">
    <div class="left">
      <label>Rows per page:
        <select v-model.number="perPageLocal" @change="updatePerPage">
          <option v-for="n in [5, 10, 20, 50]" :key="n" :value="n">{{ n }}</option>
        </select>
      </label>
      <span class="total">Total: {{ totalRecords }}</span>
    </div>
    <div class="right">
      <button :disabled="currentPageLocal === 1" @click="prevPage">Prev</button>
      <span>{{ currentPageLocal }}</span>
      <button :disabled="currentPageLocal >= totalPages" @click="nextPage">Next</button>
    </div>
  </div>
</template>

<script>
export default {
  name: "BasePagination",
  props: {
    totalRecords: Number,
    modelValue: Number,
    perPage: Number,
  },
  emits: ["update:modelValue", "update:perPage"],
  computed: {
    totalPages() {
      return Math.ceil(this.totalRecords / this.perPageLocal) || 1;
    },
  },
  data() {
    return {
      perPageLocal: this.perPage || 5,
      currentPageLocal: this.modelValue || 1,
    };
  },
  watch: {
    modelValue(val) {
      this.currentPageLocal = val;
    },
    perPage(val) {
      this.perPageLocal = val;
    },
  },
  methods: {
    updatePerPage() {
      this.$emit("update:perPage", this.perPageLocal);
      this.$emit("update:modelValue", 1);
    },
    prevPage() {
      if (this.currentPageLocal > 1) {
        this.currentPageLocal--;
        this.$emit("update:modelValue", this.currentPageLocal);
      }
    },
    nextPage() {
      if (this.currentPageLocal < this.totalPages) {
        this.currentPageLocal++;
        this.$emit("update:modelValue", this.currentPageLocal);
      }
    },
  },
};
</script>

<style scoped>
.pagination {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 8px;
}
.pagination button {
  margin: 0 4px;
}
</style>


---------------------------------
<template>
  <div class="user-table-container">
    <!-- Global Search + Reset -->
    <div class="top-bar">
      <input v-model="globalSearch" placeholder="Global search..." />
      <button @click="resetFilters">Reset Filters</button>
    </div>

    <BaseTable @reorder-columns="reorderColumns">
      <!-- Header + Top Filters -->
      <template #header="{ onDragStart, onDragOver, onDrop }">
        <tr>
          <BaseTableHeaderCell
            v-for="(col, index) in columns"
            :key="col.key"
            :index="index"
            :column="col"
            :on-drag-start="onDragStart"
            :on-drag-over="onDragOver"
            :on-drop="onDrop"
            @remove-column="removeColumn"
          />
        </tr>
        <tr>
          <th v-for="col in columns" :key="col.key">
            <input v-model="columnFilters[col.key]" placeholder="Filter..." />
          </th>
        </tr>
      </template>

      <!-- Rows -->
      <BaseTableRow
        v-for="user in paginatedFilteredUsers"
        :key="user.id"
        :row-data="user"
        :selected-ids="selectedRowIds"
        row-id-key="id"
        @row-select="onRowSelect"
      >
        <BaseTableCell
          v-for="col in columns"
          :key="col.key"
          :cell-data="user[col.key]"
          :row-data="user"
          :column="col"
          :cell-events="cellEvents"
        />
      </BaseTableRow>

      <!-- Bottom Filters -->
      <template #footer>
        <tr>
          <td v-for="col in columns" :key="col.key">
            <input v-model="bottomFilters[col.key]" placeholder="Filter..." />
          </td>
        </tr>
      </template>
    </BaseTable>

    <!-- Pagination -->
    <BasePagination
      :total-records="filteredUsers.length"
      v-model="currentPage"
      v-model:perPage="perPage"
    />
  </div>
</template>

<script>
import BaseTable from "./BaseTable.vue";
import BaseTableHeaderCell from "./BaseTableHeaderCell.vue";
import BaseTableRow from "./BaseTableRow.vue";
import BaseTableCell from "./BaseTableCell.vue";
import BasePagination from "./BasePagination.vue";

export default {
  name: "UserTable",
  components: {
    BaseTable,
    BaseTableHeaderCell,
    BaseTableRow,
    BaseTableCell,
    BasePagination,
  },
  data() {
    return {
      columns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],
      users: [
        { id: 1, name: "John", age: 29, country: "India" },
        { id: 2, name: "Sara", age: 24, country: "USA" },
        { id: 3, name: "Raj", age: 35, country: "UK" },
        { id: 4, name: "Amit", age: 31, country: "India" },
        { id: 5, name: "Mary", age: 22, country: "Canada" },
        { id: 6, name: "Liam", age: 27, country: "Australia" },
        { id: 7, name: "Emma", age: 30, country: "France" },
      ],
      globalSearch: "",
      columnFilters: {},
      bottomFilters: {},
      selectedRowIds: [],
      currentPage: 1,
      perPage: 5,
      cellEvents: {
        click: (value, row, column) => console.log("Cell clicked:", column.key, value, row),
      },
    };
  },
  computed: {
    filteredUsers() {
      let result = [...this.users];
      // global search
      if (this.globalSearch) {
        const s = this.globalSearch.toLowerCase();
        result = result.filter((u) =>
          Object.values(u).some((v) => String(v).toLowerCase().includes(s))
        );
      }
      // top filters
      Object.entries(this.columnFilters).forEach(([key, value]) => {
        if (value)
          result = result.filter((u) =>
            String(u[key] || "").toLowerCase().includes(value.toLowerCase())
          );
      });
      // bottom filters
      Object.entries(this.bottomFilters).forEach(([key, value]) => {
        if (value)
          result = result.filter((u) =>
            String(u[key] || "").toLowerCase().includes(value.toLowerCase())
          );
      });
      return result;
    },
    paginatedFilteredUsers() {
      const start = (this.currentPage - 1) * this.perPage;
      return this.filteredUsers.slice(start, start + this.perPage);
    },
  },
  methods: {
    reorderColumns({ from, to }) {
      const moved = this.columns.splice(from, 1)[0];
      this.columns.splice(to, 0, moved);
    },
    removeColumn(index) {
      this.columns.splice(index, 1);
    },
    resetFilters() {
      this.globalSearch = "";
      this.columnFilters = {};
      this.bottomFilters = {};
    },
    onRowSelect({ id, ctrlPressed }) {
      if (ctrlPressed) {
        if (this.selectedRowIds.includes(id)) {
          this.selectedRowIds = this.selectedRowIds.filter((x) => x !== id);
        } else {
          this.selectedRowIds = [...this.selectedRowIds, id];
        }
      } else {
        this.selectedRowIds = [id];
      }
    },
  },
};
</script>

<style scoped>
.user-table-container {
  font-family: Arial, sans-serif;
}
.top-bar {
  margin-bottom: 10px;
  display: flex;
  gap: 10px;
}
input {
  padding: 4px;
  width: 100%;
  box-sizing: border-box;
}
</style>
