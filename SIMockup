//Component wrapped with DataLoader - NewComp.vue
<template>
  <div>
    <h1>New App Component</h1>
    <DataLoader :method="'fetchUsers'" />
    <DataLoader :method="'fetchProducts'" />
  </div>
</template>

<script lang="ts">
import DataLoader from "./views/dl/DataLoader.vue";

export default({
  name: "NewAppView",
  components: { DataLoader }
});
</script>

//App.vue
<script>
import { provide } from "vue";
import { ExportService } from "./views/dl/ExportService";

export default({
  name: "App",
  setup() {
    const service = new ExportService();
    provide("exportService", service);
  },
});
</script>

//DataLoader.vue
<template>
  <div class="data-loader">
    <h3>Data from {{ method }}</h3>
    <div v-if="loading">Loading...</div>
    <div v-else-if="error">Error: {{ error }}</div>
    <ul v-else>
      <li v-for="(item, index) in data" :key="index">
        {{ item }}
      </li>
    </ul>
  </div>
</template>

<script>
//import { inject } from "vue";
//import { ExportService } from "./ExportService";

export default ({
  name: "DataLoader",
  props: {
    method: {
      type: String,
      required: true,
    },
  },
  inject: ['exportService'],
  data() {
    return {
      data: [],
      loading: true,
      error: "",
    };
  },
  mounted() {
    const service = this.exportService;//inject<ExportService>("exportService");

    if (!service) {
      this.error = "Service not found";
      this.loading = false;
      return;
    }

    const fetchMethod = (service)[this.method];

    if (typeof fetchMethod !== "function") {
      this.error = `Method "${this.method}" not found`;
      this.loading = false;
      return;
    }

    fetchMethod.call(service)
      .then((result) => {
        this.data = result;
        this.loading = false;
      })
      .catch((err) => {
        this.error = err.message;
        this.loading = false;
      });
  },
});
</script>


//services/ExportService.ts
export class ExportService {
  fetchUsers() {
    return Promise.resolve([
      { id: 1, name: "Alice" },
      { id: 2, name: "Bob" }
    ]);
  }

  fetchProducts() {
    return Promise.resolve([
      { id: 'a1', name: "Laptop" },
      { id: 'a2', name: "Phone" }
    ]);
  }
}
