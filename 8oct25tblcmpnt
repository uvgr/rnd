BT.vue
<template>
  <div class="table-wrapper" ref="tableWrapper">
    <table class="base-table">
      <thead>
        <tr>
          <slot
            name="header"
            :on-drag-start="handleDragStart"
            :on-drag-over="handleDragOver"
            :on-drop="handleDrop"
            :drag-over-index="dragOverIndex"
          ></slot>
        </tr>
      </thead>

      <tbody>
        <transition-group name="fade" tag="tbody">
          <slot></slot>
        </transition-group>
      </tbody>
    </table>

    <!-- Red vertical indicator line for drag position -->
    <div
      v-if="showIndicator"
      class="indicator-line"
      :style="{ left: indicatorLeft + 'px' }"
    ></div>
  </div>
</template>

<script>
export default {
  name: "BaseTable",
  data() {
    return {
      dragStartIndex: null,
      dragOverIndex: null,
      indicatorLeft: 0,
      showIndicator: false,
    };
  },
  methods: {
    handleDragStart(index, event) {
      this.dragStartIndex = index;
      event.dataTransfer.effectAllowed = "move";
    },
    handleDragOver(index, event) {
      event.preventDefault();
      this.dragOverIndex = index;
      const target = event.target.closest("th");
      if (target) {
        const rect = target.getBoundingClientRect();
        const midpoint = rect.left + rect.width / 2;
        this.indicatorLeft = event.clientX < midpoint ? rect.left : rect.right;
        this.showIndicator = true;
      }
    },
    handleDrop(index) {
      if (this.dragStartIndex === null || index === this.dragStartIndex) return;
      this.$emit("reorder-columns", {
        from: this.dragStartIndex,
        to: index,
      });
      this.resetDragState();
    },
    resetDragState() {
      this.dragStartIndex = null;
      this.dragOverIndex = null;
      this.showIndicator = false;
    },
  },
};
</script>

<style scoped>
.table-wrapper {
  position: relative;
  width: 100%;
  overflow-x: auto;
}
.base-table {
  width: 100%;
  border-collapse: collapse;
}
.base-table th,
.base-table td {
  border: 1px solid #ddd;
  padding: 8px;
  transition: all 0.3s ease;
}
.indicator-line {
  position: absolute;
  top: 0;
  bottom: 0;
  width: 2px;
  background-color: red;
  pointer-events: none;
  transition: left 0.1s ease;
}
.fade-move {
  transition: transform 0.25s ease;
}
</style>





BTHC.vue
<template>
  <th
    class="base-header-cell"
    draggable="true"
    @dragstart="onDragStart"
    @dragover="onDragOver"
    @drop="onDrop"
  >
    <div class="header-content">
      <span class="header-label"><slot></slot></span>
      <button class="close-btn" @click.stop="removeColumn">×</button>
    </div>
  </th>
</template>

<script>
export default {
  name: "BaseTableHeaderCell",
  props: {
    index: { type: Number, required: true },
    onDragStart: Function,
    onDragOver: Function,
    onDrop: Function,
  },
  methods: {
    onDragStart(event) {
      this.onDragStart && this.onDragStart(this.index, event);
    },
    onDragOver(event) {
      this.onDragOver && this.onDragOver(this.index, event);
    },
    onDrop(event) {
      this.onDrop && this.onDrop(this.index, event);
    },
    removeColumn() {
      this.$emit("remove-column", this.index);
    },
  },
};
</script>

<style scoped>
.base-header-cell {
  background: #f5f5f5;
  text-align: left;
  font-weight: bold;
  cursor: grab;
  user-select: none;
  position: relative;
}
.header-content {
  display: flex;
  justify-content: space-between;
  align-items: center;
}
.close-btn {
  background: transparent;
  border: none;
  color: #888;
  font-size: 16px;
  cursor: pointer;
}
.close-btn:hover {
  color: red;
}
</style>





BTR.vue
<template>
  <tr class="base-table-row">
    <slot></slot>
  </tr>
</template>

<script>
export default {
  name: "BaseTableRow",
};
</script>

<style scoped>
.base-table-row:hover {
  background: #fafafa;
}
</style>



BTC.vue
<template>
  <td class="base-table-cell">
    <slot></slot>
  </td>
</template>

<script>
export default {
  name: "BaseTableCell",
};
</script>

<style scoped>
.base-table-cell {
  text-align: left;
  padding: 8px;
}
</style>



BPgn.vue
<template>
  <div class="pagination-container">
    <div class="pagination-info">
      <label>
        Rows per page:
        <select v-model.number="localPerPage" @change="updatePerPage">
          <option v-for="opt in perPageOptions" :key="opt" :value="opt">
            {{ opt }}
          </option>
        </select>
      </label>
      <span class="total-records">Total: {{ totalRecords }}</span>
    </div>

    <div class="pagination-controls">
      <button
        class="page-btn"
        :disabled="currentPage === 1"
        @click="goPrev"
      >
        ‹ Prev
      </button>

      <span class="page-info">
        Page {{ currentPage }} of {{ totalPages }}
      </span>

      <button
        class="page-btn"
        :disabled="currentPage === totalPages"
        @click="goNext"
      >
        Next ›
      </button>
    </div>
  </div>
</template>

<script>
export default {
  name: "BasePagination",
  props: {
    totalRecords: { type: Number, required: true },
    perPage: { type: Number, default: 5 },
    currentPage: { type: Number, default: 1 },
    perPageOptions: {
      type: Array,
      default: () => [5, 10, 20, 50],
    },
  },
  data() {
    return {
      localPerPage: this.perPage,
    };
  },
  computed: {
    totalPages() {
      return Math.ceil(this.totalRecords / this.localPerPage) || 1;
    },
  },
  methods: {
    goPrev() {
      if (this.currentPage > 1) this.$emit("update:currentPage", this.currentPage - 1);
    },
    goNext() {
      if (this.currentPage < this.totalPages)
        this.$emit("update:currentPage", this.currentPage + 1);
    },
    updatePerPage() {
      this.$emit("update:perPage", this.localPerPage);
      this.$emit("update:currentPage", 1); // reset to first page
    },
  },
};
</script>

<style scoped>
.pagination-container {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 10px 4px;
  border-top: 1px solid #ddd;
  background: #fafafa;
  font-size: 14px;
}
.pagination-info select {
  margin-left: 6px;
  padding: 4px;
}
.total-records {
  margin-left: 16px;
}
.pagination-controls {
  display: flex;
  align-items: center;
  gap: 8px;
}
.page-btn {
  background: #007bff;
  color: white;
  border: none;
  padding: 4px 10px;
  border-radius: 4px;
  cursor: pointer;
}
.page-btn:disabled {
  background: #ccc;
  cursor: not-allowed;
}
.page-info {
  font-weight: 500;
}
</style>





UT.vue
<template>
  <div>
    <BaseTable @reorder-columns="reorderColumns">
      <template #header="{ onDragStart, onDragOver, onDrop }">
        <transition-group name="fade" tag="tr">
          <BaseTableHeaderCell
            v-for="(col, index) in columns"
            :key="col.key"
            :index="index"
            :on-drag-start="onDragStart"
            :on-drag-over="onDragOver"
            :on-drop="onDrop"
            @remove-column="removeColumn"
          >
            {{ col.label }}
          </BaseTableHeaderCell>
        </transition-group>
      </template>

      <transition-group name="fade" tag="tbody">
        <BaseTableRow
          v-for="user in paginatedUsers"
          :key="user.id"
        >
          <BaseTableCell v-for="col in columns" :key="col.key">
            {{ user[col.key] }}
          </BaseTableCell>
        </BaseTableRow>
      </transition-group>
    </BaseTable>

    <!-- Pagination -->
    <BasePagination
      :total-records="users.length"
      v-model:perPage="perPage"
      v-model:currentPage="currentPage"
    />
  </div>
</template>

<script>
import BaseTable from "./BaseTable.vue";
import BaseTableRow from "./BaseTableRow.vue";
import BaseTableCell from "./BaseTableCell.vue";
import BaseTableHeaderCell from "./BaseTableHeaderCell.vue";
import BasePagination from "./BasePagination.vue";

export default {
  name: "UserTable",
  components: {
    BaseTable,
    BaseTableRow,
    BaseTableCell,
    BaseTableHeaderCell,
    BasePagination,
  },
  data() {
    return {
      columns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],
      users: [
        { id: 1, name: "John", age: 29, country: "India" },
        { id: 2, name: "Sara", age: 24, country: "USA" },
        { id: 3, name: "Raj", age: 35, country: "UK" },
        { id: 4, name: "Amit", age: 31, country: "India" },
        { id: 5, name: "Mary", age: 22, country: "Canada" },
        { id: 6, name: "Liam", age: 27, country: "Australia" },
        { id: 7, name: "Emma", age: 30, country: "France" },
      ],
      currentPage: 1,
      perPage: 5,
    };
  },
  computed: {
    paginatedUsers() {
      const start = (this.currentPage - 1) * this.perPage;
      const end = start + this.perPage;
      return this.users.slice(start, end);
    },
  },
  methods: {
    reorderColumns({ from, to }) {
      const moved = this.columns.splice(from, 1)[0];
      this.columns.splice(to, 0, moved);
    },
    removeColumn(index) {
      this.columns.splice(index, 1);
    },
  },
};
</script>

<style scoped>
.fade-enter-active,
.fade-leave-active {
  transition: all 0.3s ease;
}
.fade-enter-from,
.fade-leave-to {
  opacity: 0;
  transform: translateX(10px);
}
</style>




UT.vue
<template>
  <div>
    <!-- Reset Columns Button -->
    <div class="table-actions">
      <button class="reset-btn" @click="resetColumns">Reset Columns</button>
    </div>

    <!-- Base Table -->
    <BaseTable @reorder-columns="reorderColumns">
      <template #header="{ onDragStart, onDragOver, onDrop }">
        <transition-group name="fade" tag="tr">
          <BaseTableHeaderCell
            v-for="(col, index) in columns"
            :key="col.key"
            :index="index"
            :on-drag-start="onDragStart"
            :on-drag-over="onDragOver"
            :on-drop="onDrop"
            @remove-column="removeColumn"
          >
            {{ col.label }}
          </BaseTableHeaderCell>
        </transition-group>
      </template>

      <transition-group name="fade" tag="tbody">
        <BaseTableRow v-for="user in paginatedUsers" :key="user.id">
          <BaseTableCell v-for="col in columns" :key="col.key">
            {{ user[col.key] }}
          </BaseTableCell>
        </BaseTableRow>
      </transition-group>
    </BaseTable>

    <!-- Pagination -->
    <BasePagination
      :total-records="users.length"
      v-model:perPage="perPage"
      v-model:currentPage="currentPage"
    />
  </div>
</template>

<script>
import BaseTable from "./BaseTable.vue";
import BaseTableRow from "./BaseTableRow.vue";
import BaseTableCell from "./BaseTableCell.vue";
import BaseTableHeaderCell from "./BaseTableHeaderCell.vue";
import BasePagination from "./BasePagination.vue";

export default {
  name: "UserTable",
  components: {
    BaseTable,
    BaseTableRow,
    BaseTableCell,
    BaseTableHeaderCell,
    BasePagination,
  },
  data() {
    return {
      // Master reference for reset
      defaultColumns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],

      // Active (visible) columns
      columns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],

      users: [
        { id: 1, name: "John", age: 29, country: "India" },
        { id: 2, name: "Sara", age: 24, country: "USA" },
        { id: 3, name: "Raj", age: 35, country: "UK" },
        { id: 4, name: "Amit", age: 31, country: "India" },
        { id: 5, name: "Mary", age: 22, country: "Canada" },
        { id: 6, name: "Liam", age: 27, country: "Australia" },
        { id: 7, name: "Emma", age: 30, country: "France" },
      ],

      currentPage: 1,
      perPage: 5,
    };
  },
  computed: {
    paginatedUsers() {
      const start = (this.currentPage - 1) * this.perPage;
      const end = start + this.perPage;
      return this.users.slice(start, end);
    },
  },
  methods: {
    reorderColumns({ from, to }) {
      const moved = this.columns.splice(from, 1)[0];
      this.columns.splice(to, 0, moved);
    },
    removeColumn(index) {
      this.columns.splice(index, 1);
    },
    resetColumns() {
      // Restore original columns
      this.columns = JSON.parse(JSON.stringify(this.defaultColumns));
    },
  },
};
</script>

<style scoped>
.table-actions {
  display: flex;
  justify-content: flex-end;
  margin-bottom: 8px;
}
.reset-btn {
  background: #28a745;
  color: white;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  transition: background 0.2s ease;
}
.reset-btn:hover {
  background: #218838;
}

.fade-enter-active,
.fade-leave-active {
  transition: all 0.3s ease;
}
.fade-enter-from,
.fade-leave-to {
  opacity: 0;
  transform: translateX(10px);
}
</style>




UT.vue
<template>
  <div class="user-table-container">
    <!-- 🔁 Top Controls -->
    <div class="table-top-bar">
      <input
        v-model="globalSearch"
        type="text"
        class="global-search"
        placeholder="Search all columns..."
      />
      <button class="reset-btn" @click="resetColumns">Reset Columns</button>
    </div>

    <!-- 🧩 Base Table -->
    <BaseTable @reorder-columns="reorderColumns">
      <!-- Table Headers -->
      <template #header="{ onDragStart, onDragOver, onDrop }">
        <transition-group name="fade" tag="tr">
          <BaseTableHeaderCell
            v-for="(col, index) in columns"
            :key="col.key"
            :index="index"
            :on-drag-start="onDragStart"
            :on-drag-over="onDragOver"
            :on-drop="onDrop"
            @remove-column="removeColumn"
          >
            {{ col.label }}
          </BaseTableHeaderCell>
        </transition-group>
      </template>

      <!-- 🧾 Column-Level Filters Row -->
      <tr class="filter-row">
        <th
          v-for="col in columns"
          :key="col.key"
        >
          <input
            type="text"
            v-model="columnFilters[col.key]"
            placeholder="Filter..."
            class="column-filter"
          />
        </th>
      </tr>

      <!-- 🧍‍♂️ Table Body -->
      <transition-group name="fade" tag="tbody">
        <BaseTableRow
          v-for="user in paginatedFilteredUsers"
          :key="user.id"
        >
          <BaseTableCell v-for="col in columns" :key="col.key">
            {{ user[col.key] }}
          </BaseTableCell>
        </BaseTableRow>
      </transition-group>
    </BaseTable>

    <!-- 🧮 Pagination -->
    <BasePagination
      :total-records="filteredUsers.length"
      v-model:perPage="perPage"
      v-model:currentPage="currentPage"
    />
  </div>
</template>

<script>
import BaseTable from "./BaseTable.vue";
import BaseTableRow from "./BaseTableRow.vue";
import BaseTableCell from "./BaseTableCell.vue";
import BaseTableHeaderCell from "./BaseTableHeaderCell.vue";
import BasePagination from "./BasePagination.vue";

export default {
  name: "UserTable",
  components: {
    BaseTable,
    BaseTableRow,
    BaseTableCell,
    BaseTableHeaderCell,
    BasePagination,
  },
  data() {
    return {
      // master column set for reset
      defaultColumns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],

      // current visible columns
      columns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],

      users: [
        { id: 1, name: "John", age: 29, country: "India" },
        { id: 2, name: "Sara", age: 24, country: "USA" },
        { id: 3, name: "Raj", age: 35, country: "UK" },
        { id: 4, name: "Amit", age: 31, country: "India" },
        { id: 5, name: "Mary", age: 22, country: "Canada" },
        { id: 6, name: "Liam", age: 27, country: "Australia" },
        { id: 7, name: "Emma", age: 30, country: "France" },
        { id: 8, name: "Noah", age: 32, country: "Germany" },
        { id: 9, name: "Olivia", age: 25, country: "USA" },
        { id: 10, name: "Mia", age: 28, country: "India" },
      ],

      currentPage: 1,
      perPage: 5,
      globalSearch: "",
      columnFilters: {}, // key → value
    };
  },
  computed: {
    filteredUsers() {
      // 🌐 Apply global search
      let filtered = this.users.filter((user) => {
        if (!this.globalSearch) return true;
        return Object.values(user)
          .join(" ")
          .toLowerCase()
          .includes(this.globalSearch.toLowerCase());
      });

      // 🔍 Apply column-level filters
      Object.keys(this.columnFilters).forEach((key) => {
        const val = this.columnFilters[key];
        if (val) {
          filtered = filtered.filter((u) =>
            String(u[key]).toLowerCase().includes(val.toLowerCase())
          );
        }
      });

      return filtered;
    },
    paginatedFilteredUsers() {
      const start = (this.currentPage - 1) * this.perPage;
      const end = start + this.perPage;
      return this.filteredUsers.slice(start, end);
    },
  },
  methods: {
    reorderColumns({ from, to }) {
      const moved = this.columns.splice(from, 1)[0];
      this.columns.splice(to, 0, moved);
    },
    removeColumn(index) {
      this.columns.splice(index, 1);
    },
    resetColumns() {
      this.columns = JSON.parse(JSON.stringify(this.defaultColumns));
    },
  },
};
</script>

<style scoped>
.user-table-container {
  width: 100%;
  margin: 0 auto;
  font-family: sans-serif;
}

.table-top-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}

.global-search {
  flex: 1;
  max-width: 300px;
  padding: 6px 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}

.reset-btn {
  background: #28a745;
  color: white;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  margin-left: 10px;
  transition: background 0.2s ease;
}
.reset-btn:hover {
  background: #218838;
}

/* Column filter inputs */
.filter-row input.column-filter {
  width: 90%;
  padding: 4px;
  border: 1px solid #ddd;
  border-radius: 3px;
  font-size: 13px;
}

.fade-enter-active,
.fade-leave-active {
  transition: all 0.3s ease;
}
.fade-enter-from,
.fade-leave-to {
  opacity: 0;
  transform: translateX(10px);
}
</style>




Added Global Search
<input v-model="globalSearch" placeholder="Search all columns..." />

Added Column-Level Filters
<tr class="filter-row">
  <th v-for="col in columns" :key="col.key">
    <input v-model="columnFilters[col.key]" placeholder="Filter..." />
  </th>
</tr>



UT.vue
<template>
  <div class="user-table-container">
    <!-- 🔍 Top Controls -->
    <div class="table-top-bar">
      <input
        v-model="globalSearch"
        type="text"
        class="global-search"
        placeholder="Search all columns..."
      />
      <button class="reset-btn" @click="resetColumns">Reset Columns</button>
    </div>

    <!-- 🧩 Base Table -->
    <BaseTable @reorder-columns="reorderColumns">
      <!-- Table Headers -->
      <template #header="{ onDragStart, onDragOver, onDrop }">
        <transition-group name="fade" tag="tr">
          <BaseTableHeaderCell
            v-for="(col, index) in columns"
            :key="col.key"
            :index="index"
            :on-drag-start="onDragStart"
            :on-drag-over="onDragOver"
            :on-drop="onDrop"
            @remove-column="removeColumn"
          >
            {{ col.label }}
          </BaseTableHeaderCell>
        </transition-group>
      </template>

      <!-- Column Filters -->
      <tr class="filter-row">
        <th v-for="col in columns" :key="col.key">
          <input
            type="text"
            v-model="columnFilters[col.key]"
            placeholder="Filter..."
            class="column-filter"
          />
        </th>
      </tr>

      <!-- 🧍‍♂️ Table Body -->
      <transition-group name="fade" tag="tbody">
        <BaseTableRow
          v-for="user in paginatedFilteredUsers"
          :key="user.id"
          :row-data="user"
          :row-events="tableConfig.rowEvents"
        >
          <BaseTableCell
            v-for="col in columns"
            :key="col.key"
            :cell-data="user[col.key]"
            :row-data="user"
            :column="col"
            :cell-events="tableConfig.cellEvents"
          >
            {{ user[col.key] }}
          </BaseTableCell>
        </BaseTableRow>
      </transition-group>
    </BaseTable>

    <!-- Pagination -->
    <BasePagination
      :total-records="filteredUsers.length"
      v-model:perPage="perPage"
      v-model:currentPage="currentPage"
    />
  </div>
</template>

<script>
import BaseTable from "./BaseTable.vue";
import BaseTableRow from "./BaseTableRow.vue";
import BaseTableCell from "./BaseTableCell.vue";
import BaseTableHeaderCell from "./BaseTableHeaderCell.vue";
import BasePagination from "./BasePagination.vue";

export default {
  name: "UserTable",
  components: {
    BaseTable,
    BaseTableRow,
    BaseTableCell,
    BaseTableHeaderCell,
    BasePagination,
  },
  data() {
    return {
      // Resettable columns
      defaultColumns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],
      columns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],

      // Table Data
      users: [
        { id: 1, name: "John", age: 29, country: "India" },
        { id: 2, name: "Sara", age: 24, country: "USA" },
        { id: 3, name: "Raj", age: 35, country: "UK" },
        { id: 4, name: "Amit", age: 31, country: "India" },
        { id: 5, name: "Mary", age: 22, country: "Canada" },
        { id: 6, name: "Liam", age: 27, country: "Australia" },
        { id: 7, name: "Emma", age: 30, country: "France" },
      ],

      currentPage: 1,
      perPage: 5,
      globalSearch: "",
      columnFilters: {},

      // ⚙️ Configuration for event handling
      tableConfig: {
        rowEvents: {
          click: (row) => alert(`Row clicked: ${row.name}`),
          dblclick: (row) => alert(`Double-clicked row: ${row.id}`),
        },
        cellEvents: {
          click: (cell, row, col) =>
            console.log(`Clicked cell [${col.key}]: ${cell}`, row),
          mouseover: (cell, row, col) =>
            console.log(`Hovered on ${col.key}:`, cell),
        },
      },
    };
  },
  computed: {
    filteredUsers() {
      // Global search
      let filtered = this.users.filter((user) => {
        if (!this.globalSearch) return true;
        return Object.values(user)
          .join(" ")
          .toLowerCase()
          .includes(this.globalSearch.toLowerCase());
      });

      // Column filters
      Object.keys(this.columnFilters).forEach((key) => {
        const val = this.columnFilters[key];
        if (val) {
          filtered = filtered.filter((u) =>
            String(u[key]).toLowerCase().includes(val.toLowerCase())
          );
        }
      });
      return filtered;
    },
    paginatedFilteredUsers() {
      const start = (this.currentPage - 1) * this.perPage;
      const end = start + this.perPage;
      return this.filteredUsers.slice(start, end);
    },
  },
  methods: {
    reorderColumns({ from, to }) {
      const moved = this.columns.splice(from, 1)[0];
      this.columns.splice(to, 0, moved);
    },
    removeColumn(index) {
      this.columns.splice(index, 1);
    },
    resetColumns() {
      this.columns = JSON.parse(JSON.stringify(this.defaultColumns));
    },
  },
};
</script>

<style scoped>
.user-table-container {
  width: 100%;
  margin: 0 auto;
  font-family: sans-serif;
}
.table-top-bar {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 10px;
}
.global-search {
  flex: 1;
  max-width: 300px;
  padding: 6px 8px;
  border: 1px solid #ccc;
  border-radius: 4px;
}
.reset-btn {
  background: #28a745;
  color: white;
  border: none;
  padding: 6px 12px;
  border-radius: 4px;
  cursor: pointer;
  font-weight: 500;
  margin-left: 10px;
  transition: background 0.2s ease;
}
.reset-btn:hover {
  background: #218838;
}
.filter-row input {
  width: 90%;
  padding: 4px;
  border: 1px solid #ddd;
  border-radius: 3px;
  font-size: 13px;
}
</style>






BTR.vue
<template>
  <tr
    class="base-table-row"
    v-on="boundRowEvents"
  >
    <slot></slot>
  </tr>
</template>

<script>
export default {
  name: "BaseTableRow",
  props: {
    rowData: { type: Object, required: true },
    rowEvents: { type: Object, default: () => ({}) },
  },
  computed: {
    boundRowEvents() {
      const bindings = {};
      Object.entries(this.rowEvents).forEach(([eventName, handler]) => {
        bindings[eventName] = (e) => handler(this.rowData, e);
      });
      return bindings;
    },
  },
};
</script>

<style scoped>
.base-table-row:hover {
  background: #f9f9f9;
  cursor: pointer;
}
</style>





BTC.vue
<template>
  <td
    class="base-table-cell"
    v-on="boundCellEvents"
  >
    <slot></slot>
  </td>
</template>

<script>
export default {
  name: "BaseTableCell",
  props: {
    cellData: [String, Number, Object],
    rowData: { type: Object, required: true },
    column: { type: Object, required: true },
    cellEvents: { type: Object, default: () => ({}) },
  },
  computed: {
    boundCellEvents() {
      const bindings = {};
      Object.entries(this.cellEvents).forEach(([eventName, handler]) => {
        bindings[eventName] = (e) =>
          handler(this.cellData, this.rowData, this.column, e);
      });
      return bindings;
    },
  },
};
</script>

<style scoped>
.base-table-cell {
  padding: 8px;
  border: 1px solid #ddd;
}
.base-table-cell:hover {
  background: #fcfcfc;
}
</style>





UT.vue
tableConfig: {
  rowEvents: {
    click: (row) => alert(`Row clicked: ${row.name}`),
    dblclick: (row) => console.log("Double clicked", row),
  },
  cellEvents: {
    click: (cell, row, col) =>
      console.log(`Clicked cell ${col.key}:`, cell, row),
    mouseover: (cell, row, col) =>
      console.log(`Hovered on ${col.key}: ${cell}`),
  },
}






BTR.vue
<template>
  <tr
    class="base-table-row"
    v-on="boundRowEvents"
    @mouseenter="isHovered = true"
    @mouseleave="isHovered = false"
    :class="{ hovered: isHovered }"
  >
    <slot></slot>
  </tr>
</template>

<script>
export default {
  name: "BaseTableRow",
  props: {
    rowData: { type: Object, required: true },
    rowEvents: { type: Object, default: () => ({}) },
  },
  data() {
    return {
      isHovered: false,
    };
  },
  computed: {
    boundRowEvents() {
      const bindings = {};
      Object.entries(this.rowEvents).forEach(([eventName, handler]) => {
        bindings[eventName] = (e) => handler(this.rowData, e);
      });
      return bindings;
    },
  },
};
</script>

<style scoped>
.base-table-row {
  transition: background-color 0.2s ease;
}

/* Hovered Row */
.base-table-row.hovered {
  background-color: #f2f7ff; /* light blue tone for highlight */
}

/* Optional pointer feedback */
.base-table-row:hover {
  cursor: pointer;
}
</style>






UserTable.vue
<style scoped>
.user-table-container {
  --hover-color: #fdf5e6; /* soft yellow hover */
}

.base-table-row.hovered {
  background-color: var(--hover-color);
}
</style>



BTR.vue
<template>
  <tr
    class="base-table-row"
    v-on="boundRowEvents"
    @mouseenter="isHovered = true"
    @mouseleave="isHovered = false"
    @click="handleClick"
    :class="{
      hovered: isHovered,
      selected: isSelected
    }"
  >
    <slot></slot>
  </tr>
</template>

<script>
export default {
  name: "BaseTableRow",
  props: {
    rowData: { type: Object, required: true },
    rowEvents: { type: Object, default: () => ({}) },
    selectedRows: { type: Array, default: () => [] }, // passed from parent
  },
  data() {
    return {
      isHovered: false,
    };
  },
  computed: {
    boundRowEvents() {
      const bindings = {};
      // other row events like dblclick, contextmenu etc.
      Object.entries(this.rowEvents).forEach(([eventName, handler]) => {
        if (eventName !== "click") {
          bindings[eventName] = (e) => handler(this.rowData, e);
        }
      });
      return bindings;
    },
    isSelected() {
      return this.selectedRows.some((r) => r.id === this.rowData.id);
    },
  },
  methods: {
    handleClick(e) {
      if (e.ctrlKey) {
        // Ctrl + click = toggle row selection
        this.$emit("row-selected", this.rowData);
      } else if (this.rowEvents.click) {
        // Normal click = call configured click handler
        this.rowEvents.click(this.rowData, e);
      }
    },
  },
};
</script>

<style scoped>
.base-table-row {
  transition: background-color 0.2s ease;
}

/* Hovered row */
.base-table-row.hovered {
  background-color: #f2f7ff;
}

/* Selected row */
.base-table-row.selected {
  background-color: #d0ebff;
  font-weight: 500;
}

/* Optional pointer feedback */
.base-table-row:hover {
  cursor: pointer;
}
</style>




UserTable.vue
<template>
  <div class="user-table-container">
    <!-- top controls... -->

    <BaseTable @reorder-columns="reorderColumns">
      <!-- header + filter rows (same) -->

      <transition-group name="fade" tag="tbody">
        <BaseTableRow
          v-for="user in paginatedFilteredUsers"
          :key="user.id"
          :row-data="user"
          :row-events="tableConfig.rowEvents"
          :selected-rows="selectedRows"
          @row-selected="toggleRowSelection"
        >
          <BaseTableCell
            v-for="col in columns"
            :key="col.key"
            :cell-data="user[col.key]"
            :row-data="user"
            :column="col"
            :cell-events="tableConfig.cellEvents"
          >
            {{ user[col.key] }}
          </BaseTableCell>
        </BaseTableRow>
      </transition-group>
    </BaseTable>

    <!-- pagination -->
    <BasePagination
      :total-records="filteredUsers.length"
      v-model:perPage="perPage"
      v-model:currentPage="currentPage"
    />
  </div>
</template>

<script>
import BaseTable from "./BaseTable.vue";
import BaseTableRow from "./BaseTableRow.vue";
import BaseTableCell from "./BaseTableCell.vue";
import BaseTableHeaderCell from "./BaseTableHeaderCell.vue";
import BasePagination from "./BasePagination.vue";

export default {
  name: "UserTable",
  components: {
    BaseTable,
    BaseTableRow,
    BaseTableCell,
    BaseTableHeaderCell,
    BasePagination,
  },
  data() {
    return {
      defaultColumns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],
      columns: [
        { key: "id", label: "ID" },
        { key: "name", label: "Name" },
        { key: "age", label: "Age" },
        { key: "country", label: "Country" },
      ],
      users: [
        { id: 1, name: "John", age: 29, country: "India" },
        { id: 2, name: "Sara", age: 24, country: "USA" },
        { id: 3, name: "Raj", age: 35, country: "UK" },
        { id: 4, name: "Amit", age: 31, country: "India" },
        { id: 5, name: "Mary", age: 22, country: "Canada" },
        { id: 6, name: "Liam", age: 27, country: "Australia" },
      ],
      currentPage: 1,
      perPage: 5,
      globalSearch: "",
      columnFilters: {},
      selectedRows: [], // 👈 new

      tableConfig: {
        rowEvents: {
          click: (row) => alert(`Row clicked: ${row.name}`),
        },
        cellEvents: {
          click: (cell, row, col) =>
            console.log(`Clicked cell ${col.key}:`, cell),
        },
      },
    };
  },
  computed: {
    filteredUsers() {
      let filtered = this.users.filter((user) => {
        if (!this.globalSearch) return true;
        return Object.values(user)
          .join(" ")
          .toLowerCase()
          .includes(this.globalSearch.toLowerCase());
      });
      Object.keys(this.columnFilters).forEach((key) => {
        const val = this.columnFilters[key];
        if (val) {
          filtered = filtered.filter((u) =>
            String(u[key]).toLowerCase().includes(val.toLowerCase())
          );
        }
      });
      return filtered;
    },
    paginatedFilteredUsers() {
      const start = (this.currentPage - 1) * this.perPage;
      const end = start + this.perPage;
      return this.filteredUsers.slice(start, end);
    },
  },
  methods: {
    reorderColumns({ from, to }) {
      const moved = this.columns.splice(from, 1)[0];
      this.columns.splice(to, 0, moved);
    },
    removeColumn(index) {
      this.columns.splice(index, 1);
    },
    resetColumns() {
      this.columns = JSON.parse(JSON.stringify(this.defaultColumns));
    },
    toggleRowSelection(row) {
      const index = this.selectedRows.findIndex((r) => r.id === row.id);
      if (index >= 0) this.selectedRows.splice(index, 1);
      else this.selectedRows.push(row);
    },
  },
};
</script>




BTR.vue
.base-table-row.hovered {
  background-color: #f9fcff;
}
.base-table-row.selected {
  background-color: #cce5ff;
  border-left: 4px solid #007bff;
}
